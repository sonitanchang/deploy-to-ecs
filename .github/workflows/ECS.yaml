name: sonita's first deployment
on: 
    push:
      branches:
        main
    workflow_dispatch:
jobs:
    buildanddeploytoecs:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      steps:
       ## clone the code to the runner using an action in github market place
       - name: checkout code to repo
         uses: actions/checkout@v3
       ## setup java and maven 
       - name: setup java and maven environment
         uses: actions/setup-java@v3
         with:
           distribution: 'adopt'
           java-version: '11'
       ### use sonarqube to do code analysis. Ensure that you have a sonarqube server running and you've created a project. 
      #  - name: code analysis with sonarqube
      #    run: mvn sonar:sonar -Dsonar.projectKey=xashy-webapp -Dsonar.host.url=${{secrets.SONAR_HOST_URL}} -Dsonar.token=${{secrets.SONAR_LOGIN_TOKEN}}
        ### upload to github packages and ensure the pom.xml at the level of distribution management.
       - name: upload to github packages
         run: mvn --batch-mode deploy 
         env:
           GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      ##set up authentication to aws, make sure you create a secret for access key, secretekey and the region
       - name: authentication to aws account
         uses: aws-actions/configure-aws-credentials@v1
         with: 
           aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
           aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
           aws-region: ${{secrets.AWS_REGION}}   
        ## this steps permits github actions to login to ecr 
       - name: Login to Amazon ECR
         id: login-ecr
         uses: aws-actions/amazon-ecr-login@v1 
         ###  conatainerise artifact with maven , tag and push to ecr repo. 
       - name: Build, tag and push 
         id: build-image
         env:
            REGISTRY: ${{steps.login-ecr.outputs.registry}}
            REPOSITORY: sonita-first-workflow
            IMAGE_TAG: ${{github.sha}}
         run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 
            echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT     
